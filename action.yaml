name: Build x86-64 or arm-64 images pushes

inputs:
  architecture:
    default: all
    description: Architecture name to build for.
    type: choice
    options:
      - all
      - arm-64
      - x86-64
  build-args:
    description: List of build-time variables.
  no-cache:
    description: Do not use cache when building the image.
    default: false
    type: boolean

  name:
    description: Image name to build.
    required: true
  tags:
    description: Image tags to use for registering.
  labels:
    description: Image labels to annotate registered image with.

  registry:
    description: Registry to use for image upload.
    required: true
  username:
    description: Login to use for authenticating against registry.
    required: true
  ownername:
    description: Repository owner name. If not set use provided user names instead.
  password:
    description: Password to log into registry.
    required: true

  alternate-registry:
    description: Alternate registry to use for image upload.
  alternate-username:
    description: Login to use for authenticating against alternate registry. If not set use mail username.
  alternate-ownername:
    description: Repository owner name. If not set use provided user names instead.
  alternate-password:
    description: Password to log into alternate registry. If not set use main password.

runs:
  using: composite

  steps:
    - name: Determine image registry urls.
      id: registry
      shell: bash
      run: |
        echo "url=${{ inputs.registry }}/${{ inputs.ownername || inputs.username }}/${{ inputs.name }}" >> $GITHUB_OUTPUT
        if [[ "${{ inputs.alternate-registry }}" != '' ]]; then
          echo "alternate_url=${{ format('{0}/{1}/{2}', inputs.alternate-registry, inputs.alternate-ownername || inputs.alternate-username || inputs.ownername || inputs.username, inputs.name) }}" >> $GITHUB_OUTPUT
        fi

    - if: |
        inputs.architecture == 'all' ||
        inputs.architecture == 'arm-64' &&
        (runner.arch == 'X86' || runner.arch == 'X64') ||
        inputs.architecture == 'x86-64' && runner.arch == 'ARM64'
      name: Set up QEMU for emulating arm architecture on x86 or vice versa.
      uses: docker/setup-qemu-action@v2.1.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1

    - uses: actions/checkout@v3.3.0

    - name: Log into the Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - if: inputs.alternate-registry
      name: Log into the alternate Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ inputs.alternate-registry }}
        username: ${{ inputs.alternate-username || inputs.username }}
        password: ${{ inputs.alternate-password || inputs.password }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4.3.0
      with:
        images: |
          ${{ steps.registry.outputs.url }}
          ${{ steps.registry.outputs.alternate_url }}
        # NOTE: If not set branch name will be used.
        tags: latest

    - name: Set resolved tag by given branch name.
      id: derive_tags
      shell: bash
      run: |
        echo 'names<<EOM' >> $GITHUB_OUTPUT
        if [ "${{ inputs.tags }}" = '' ]; then
          echo "${{ steps.registry.outputs.url }}:${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          if [[ "${{ steps.registry.outputs.alternate_url }}" != '' ]]; then
            echo "${{ steps.registry.outputs.alternate_url }}:${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
        else
          tags=(${{ inputs.tags }})
          tags="${tags//CURRENT_TAG_OR_BRANCH/${GITHUB_REF_NAME}}"
          tags="${tags//main/latest}"
          tags="${tags//master/latest}"
          included_tags=''

          for name in "${tags[@]}"; do
            tag="${{ steps.registry.outputs.url }}:${name}"
            if [[ "$included_tags" != *"$tag"* ]]; then
              echo "$tag" >> $GITHUB_OUTPUT
              if [[ "${{ steps.registry.outputs.alternate_url }}" != '' ]]; then
                echo "${{ steps.registry.outputs.alternate_url }}:${name}" >> $GITHUB_OUTPUT
              fi
              included_tags+=" $tag"
            fi
          done
        fi
        echo EOM >> $GITHUB_OUTPUT

    - name: Build for ${{ inputs.architecture }} architecture and push image
      uses: docker/build-push-action@v3.3.0
      with:
        build-args: ${{ inputs.build-args }}
        context: .

        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        no-cache: ${{ inputs.no-cache && 'true' || 'false' }}

        # NOTE: Build for arm and x86 architecture with 64 bit.
        platforms: |
          ${{
            inputs.architecture == 'all' &&
            'linux/amd64,linux/arm64' ||
            inputs.architecture == 'arm-64' &&
            'linux/arm64' ||
            inputs.architecture == 'x86-64' &&
            'linux/amd64'
          }}

        tags: ${{ steps.derive_tags.outputs.names || steps.meta.outputs.tags }}
        labels: ${{ inputs.labels || steps.meta.outputs.labels }}

        pull: true
        push: true

    # This ugly bit is necessary if you don't want your cache to grow forever
    # until it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
