name: Build x86-64 or arm-64 images pushes

inputs:
  architecture:
    default: all
    description: Architecture name to build for.
    type: choice
    options:
      - all
      - arm-64
      - x86-64
  build-args:
    description: List of build-time variables.
  no-cache:
    description: Do not use cache when building the image.
    default: false
    type: boolean

  name:
    description: Image name to build.
    required: true
  tags:
    description: Image tags to use for registering.
  labels:
    description: Image labels to annotate registered image with.

  alternate-registry:
    description: Alternate registry to use for image upload.
  alternate-username:
    description: Login to use for authenticating against alternate registry.
  alternate-password:
    description: Password to log in to alternate registry.

  registry:
    description: Registry to use for image upload.
    required: true
  username:
    description: Login to use for authenticating against registry.
    required: true
  password:
    description: Password to log in to registry.
    required: true

runs:
  using: composite

  steps:
    - if: |
        inputs.architecture == 'all' ||
        inputs.architecture == 'arm-64' &&
        (runner.arch == 'X86' || runner.arch == 'X64') ||
        inputs.architecture == 'x86-64' && runner.arch == 'ARM64'
      name: Set up QEMU for emulating arm architecture on x86 or vice versa.
      uses: docker/setup-qemu-action@v2.1.0

    - if: |
        inputs.architecture == 'all' ||
        inputs.architecture == 'arm-64' &&
        (runner.arch == 'X86' || runner.arch == 'X64') ||
        inputs.architecture == 'x86-64' && runner.arch == 'ARM64'
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1

    - uses: actions/checkout@v3.1.0

    - name: Log in to the Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - if: |
        inputs.alternate-registry &&
        inputs.alternate-username &&
        inputs.alternate-password
      name: Log in to the alternate Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ inputs.alternate-registry }}
        username: ${{ inputs.alternate-username }}
        password: ${{ inputs.alternate-password }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4.1.1
      with:
        images: |
          ${{ inputs.alternate-registry && inputs.alternate-username && format('{0}/{1}/{2}', inputs.alternate-registry, inputs.alternate-username, inputs.name) || '' }}
          ${{ inputs.registry }}/${{ inputs.username }}/${{ inputs.name }}
        # NOTE: If not set branch name will be used.
        tags: latest

    - name: Extract current branch name
      id: extract_branch
      shell: bash
      run: "##[set-output name=name;]${GITHUB_REF#refs/heads/}"
    - name: Set resolved tag by given branch name.
      id: resolve_tag
      if: inputs.tags == 'CURRENT_BRANCH_NAME'
      run: "##[set-output name=name;]${{ steps.extract_branch.outputs.name }}"
      shell: bash

    - name: Print determined branch name and tag
      shell: bash
      run: echo ${{ steps.extract_branch.outputs.name }} and ${{ steps.resolve_tag.outputs.name }}

    - name: Build for ${{ inputs.architecture }} architecture and push image
      uses: docker/build-push-action@v3.2.0
      with:
        build-args: ${{ inputs.build-args }}
        context: .
        no-cache: ${{ inputs.no-cache && 'true' || 'false' }}
        # NOTE: Build for arm and x86 architecture with 64 bit.
        platforms: |
          ${{
            inputs.architecture == 'all' &&
            'linux/amd64,linux/arm64' ||
            inputs.architecture == 'arm-64' &&
            'linux/arm64' ||
            inputs.architecture == 'x86-64' &&
            'linux/amd64'
          }}
        tags: |
          steps.resolve_tag.outputs.name ||
          inputs.tags ||
          steps.meta.outputs.tags
        labels: ${{ inputs.labels || steps.meta.outputs.labels }}

        pull: true
        push: true
